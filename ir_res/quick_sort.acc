fn @getarray(#0: i32* ) -> i32;
fn @getch( ) -> i32;
fn @getint( ) -> i32;
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putint(#0: i32 ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @Swap(#a: i32*, #l: i32, #h: i32 ) -> i32 {
%entry:
  let %0 = alloca i32, 1
  let %1 = store #a, %0
  let %2 = alloca i32, 1
  let %3 = store #l, %2
  let %4 = alloca i32, 1
  let %5 = store #h, %4
  let %ret.addr = alloca i32, 1
  let %6 = alloca i32, 1
  let %7 = load %2
  let %8 = offset i32, %0, [%7 < none]
  let %9 = load %8
  let %10 = store %9, %6
  let %11 = load %2
  let %12 = offset i32, %0, [%11 < none]
  let %13 = load %4
  let %14 = offset i32, %0, [%13 < none]
  let %15 = load %14
  let %16 = store %15, %12
  let %17 = load %4
  let %18 = offset i32, %0, [%17 < none]
  let %19 = load %6
  let %20 = store %19, %18
  let %21 = store 0, %ret.addr
  jmp label %exit
%exit:
  let %23 = load %ret.addr
  ret %23
}
fn @Partition(#b: i32*, #low: i32, #high: i32 ) -> i32 {
%entry:
  let %0 = alloca i32, 1
  let %1 = store #b, %0
  let %2 = alloca i32, 1
  let %3 = store #low, %2
  let %4 = alloca i32, 1
  let %5 = store #high, %4
  let %ret.addr = alloca i32, 1
  let %6 = alloca i32, 1
  let %7 = load %2
  let %8 = offset i32, %0, [%7 < none]
  let %9 = load %8
  let %10 = store %9, %6
  jmp label %12
%12:
  let %13 = load %2
  let %14 = load %4
  let %15 = lt %13, %14
  br %15, label %17, label %19
%17:
  jmp label %23
%19:
  let %20 = load %2
  let %21 = store %20, %ret.addr
  jmp label %exit
%23:
  let %24 = load %2
  let %25 = load %4
  let %26 = lt %24, %25
  br %26, label %28, label %40
%28:
  let %29 = load %4
  let %30 = offset i32, %0, [%29 < none]
  let %31 = load %30
  let %32 = load %6
  let %33 = ge %31, %32
  br %33, label %35, label %40
%35:
  let %36 = load %4
  let %37 = sub %36, 1
  let %38 = store %37, %4
  jmp label %23
%40:
  let %41 = load %2
  let %42 = load %4
  let %43 = call @Swap, %0, %41, %42
  jmp label %45
%45:
  let %46 = load %2
  let %47 = load %4
  let %48 = lt %46, %47
  br %48, label %50, label %62
%50:
  let %51 = load %2
  let %52 = offset i32, %0, [%51 < none]
  let %53 = load %52
  let %54 = load %6
  let %55 = le %53, %54
  br %55, label %57, label %62
%57:
  let %58 = load %2
  let %59 = add %58, 1
  let %60 = store %59, %2
  jmp label %45
%62:
  let %63 = load %2
  let %64 = load %4
  let %65 = call @Swap, %0, %63, %64
  jmp label %12
%exit:
  let %67 = load %ret.addr
  ret %67
}
fn @QuickSort(#c: i32*, #low1: i32, #high1: i32 ) -> i32 {
%entry:
  let %0 = alloca i32, 1
  let %1 = store #c, %0
  let %2 = alloca i32, 1
  let %3 = store #low1, %2
  let %4 = alloca i32, 1
  let %5 = store #high1, %4
  let %ret.addr = alloca i32, 1
  let %6 = alloca i32, 1
  jmp label %8
%8:
  let %9 = load %2
  let %10 = load %4
  let %11 = lt %9, %10
  br %11, label %13, label %27
%13:
  let %14 = load %2
  let %15 = load %4
  let %16 = call @Partition, %0, %14, %15
  let %17 = store %16, %6
  let %18 = load %2
  let %19 = load %6
  let %20 = sub %19, 1
  let %21 = call @QuickSort, %0, %18, %20
  let %22 = load %6
  let %23 = add %22, 1
  let %24 = load %4
  let %25 = call @QuickSort, %0, %23, %24
  jmp label %27
%27:
  let %28 = store 0, %ret.addr
  jmp label %exit
%exit:
  let %30 = load %ret.addr
  ret %30
}
fn @main( ) -> i32 {
%entry:
  let %ret.addr = alloca i32, 1
  let %0 = alloca i32, 1
  let %1 = store 8, %0
  let %2 = alloca i32, 8
  let %3 = alloca i32, 1
  let %4 = store 0, %3
  jmp label %6
%6:
  let %7 = load %3
  let %8 = load %0
  let %9 = lt %7, %8
  br %9, label %11, label %20
%11:
  let %12 = load %3
  let %13 = offset i32, %2, [%12 < 8]
  let %14 = call @getint
  let %15 = store %14, %13
  let %16 = load %3
  let %17 = add %16, 1
  let %18 = store %17, %3
  jmp label %6
%20:
  let %21 = load %0
  let %22 = sub %21, 1
  let %23 = call @QuickSort, %2, 0, %22
  let %24 = store 0, %3
  jmp label %26
%26:
  let %27 = load %3
  let %28 = load %0
  let %29 = lt %27, %28
  br %29, label %31, label %41
%31:
  let %32 = load %3
  let %33 = offset i32, %2, [%32 < 8]
  let %34 = load %33
  let %35 = call @putint, %34
  let %36 = call @putch, 32
  let %37 = load %3
  let %38 = add %37, 1
  let %39 = store %38, %3
  jmp label %26
%41:
  let %42 = store 0, %ret.addr
  jmp label %exit
%exit:
  let %44 = load %ret.addr
  ret %44
}
