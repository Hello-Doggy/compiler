@a : region i32, 81
fn @getarray(#0: i32* ) -> i32;
fn @getch( ) -> i32;
fn @getint( ) -> i32;
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putint(#0: i32 ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @check_sudoku(#a: i32* ) -> i32 {
%entry:
  let %0 = alloca i32, 1
  let %1 = store #a, %0
  let %ret.addr = alloca i32, 1
  let %2 = alloca i32, 1
  let %3 = alloca i32, 1
  let %4 = alloca i32, 1
  let %5 = alloca i32, 9
  let %6 = store 0, %2
  let %7 = alloca i32, 1
  let %8 = alloca i32, 1
  jmp label %10
%10:
  let %11 = load %2
  let %12 = lt %11, 9
  br %12, label %14, label %17
%14:
  let %15 = store 0, %3
  jmp label %20
%17:
  let %18 = store 0, %2
  jmp label %83
%20:
  let %21 = load %3
  let %22 = lt %21, 9
  br %22, label %24, label %32
%24:
  let %25 = load %3
  let %26 = offset i32, %5, [%25 < 9]
  let %27 = store 0, %26
  let %28 = load %3
  let %29 = add %28, 1
  let %30 = store %29, %3
  jmp label %20
%32:
  let %33 = store 0, %3
  jmp label %35
%35:
  let %36 = load %3
  let %37 = lt %36, 9
  br %37, label %39, label %41
%39:
  jmp label %46
%41:
  let %42 = load %2
  let %43 = add %42, 1
  let %44 = store %43, %2
  jmp label %10
%46:
  let %47 = load %2
  let %48 = load %3
  let %49 = offset i32, %0, [%47 < none], [%48 < 9]
  let %50 = load %49
  br %50, label %52, label %54
%52:
  jmp label %59
%54:
  let %55 = load %3
  let %56 = add %55, 1
  let %57 = store %56, %3
  jmp label %35
%59:
  let %60 = load %2
  let %61 = load %3
  let %62 = offset i32, %0, [%60 < none], [%61 < 9]
  let %63 = load %62
  let %64 = sub %63, 1
  let %65 = offset i32, %5, [%64 < 9]
  let %66 = load %65
  let %67 = eq 0, %66
  br %67, label %69, label %78
%69:
  let %70 = load %2
  let %71 = load %3
  let %72 = offset i32, %0, [%70 < none], [%71 < 9]
  let %73 = load %72
  let %74 = sub %73, 1
  let %75 = offset i32, %5, [%74 < 9]
  let %76 = store 1, %75
  jmp label %81
%78:
  let %79 = store 0, %ret.addr
  jmp label %exit
%81:
  jmp label %54
%83:
  let %84 = load %2
  let %85 = lt %84, 9
  br %85, label %87, label %90
%87:
  let %88 = store 0, %3
  jmp label %93
%90:
  let %91 = store 0, %2
  jmp label %156
%93:
  let %94 = load %3
  let %95 = lt %94, 9
  br %95, label %97, label %105
%97:
  let %98 = load %3
  let %99 = offset i32, %5, [%98 < 9]
  let %100 = store 0, %99
  let %101 = load %3
  let %102 = add %101, 1
  let %103 = store %102, %3
  jmp label %93
%105:
  let %106 = store 0, %3
  jmp label %108
%108:
  let %109 = load %3
  let %110 = lt %109, 9
  br %110, label %112, label %114
%112:
  jmp label %119
%114:
  let %115 = load %2
  let %116 = add %115, 1
  let %117 = store %116, %2
  jmp label %83
%119:
  let %120 = load %3
  let %121 = load %2
  let %122 = offset i32, %0, [%120 < none], [%121 < 9]
  let %123 = load %122
  br %123, label %125, label %127
%125:
  jmp label %132
%127:
  let %128 = load %3
  let %129 = add %128, 1
  let %130 = store %129, %3
  jmp label %108
%132:
  let %133 = load %3
  let %134 = load %2
  let %135 = offset i32, %0, [%133 < none], [%134 < 9]
  let %136 = load %135
  let %137 = sub %136, 1
  let %138 = offset i32, %5, [%137 < 9]
  let %139 = load %138
  let %140 = eq 0, %139
  br %140, label %142, label %151
%142:
  let %143 = load %3
  let %144 = load %2
  let %145 = offset i32, %0, [%143 < none], [%144 < 9]
  let %146 = load %145
  let %147 = sub %146, 1
  let %148 = offset i32, %5, [%147 < 9]
  let %149 = store 1, %148
  jmp label %154
%151:
  let %152 = store 0, %ret.addr
  jmp label %exit
%154:
  jmp label %127
%156:
  let %157 = load %2
  let %158 = lt %157, 3
  br %158, label %160, label %163
%160:
  let %161 = store 0, %3
  jmp label %166
%163:
  let %164 = store 1, %ret.addr
  jmp label %exit
%166:
  let %167 = load %3
  let %168 = lt %167, 3
  br %168, label %170, label %173
%170:
  let %171 = store 0, %4
  jmp label %178
%173:
  let %174 = load %2
  let %175 = add %174, 1
  let %176 = store %175, %2
  jmp label %156
%178:
  let %179 = load %4
  let %180 = lt %179, 9
  br %180, label %182, label %190
%182:
  let %183 = load %4
  let %184 = offset i32, %5, [%183 < 9]
  let %185 = store 0, %184
  let %186 = load %4
  let %187 = add %186, 1
  let %188 = store %187, %4
  jmp label %178
%190:
  let %191 = store 0, %4
  jmp label %193
%193:
  let %194 = load %4
  let %195 = lt %194, 3
  br %195, label %197, label %200
%197:
  let %198 = store 0, %7
  jmp label %205
%200:
  let %201 = load %3
  let %202 = add %201, 1
  let %203 = store %202, %3
  jmp label %166
%205:
  let %206 = load %7
  let %207 = lt %206, 3
  br %207, label %209, label %222
%209:
  let %210 = load %2
  let %211 = mul %210, 3
  let %212 = load %4
  let %213 = add %211, %212
  let %214 = load %3
  let %215 = mul %214, 3
  let %216 = load %7
  let %217 = add %215, %216
  let %218 = offset i32, %0, [%213 < none], [%217 < 9]
  let %219 = load %218
  let %220 = store %219, %8
  jmp label %227
%222:
  let %223 = load %4
  let %224 = add %223, 1
  let %225 = store %224, %4
  jmp label %193
%227:
  let %228 = load %8
  br %228, label %230, label %232
%230:
  jmp label %237
%232:
  let %233 = load %7
  let %234 = add %233, 1
  let %235 = store %234, %7
  jmp label %205
%237:
  let %238 = load %8
  let %239 = sub %238, 1
  let %240 = offset i32, %5, [%239 < 9]
  let %241 = load %240
  let %242 = eq 0, %241
  br %242, label %244, label %250
%244:
  let %245 = load %8
  let %246 = sub %245, 1
  let %247 = offset i32, %5, [%246 < 9]
  let %248 = store 1, %247
  jmp label %253
%250:
  let %251 = store 0, %ret.addr
  jmp label %exit
%253:
  jmp label %232
%exit:
  let %255 = load %ret.addr
  ret %255
}
fn @solve_sudoku( ) -> i32 {
%entry:
  let %ret.addr = alloca i32, 1
  let %0 = alloca i32, 1
  let %1 = alloca i32, 1
  let %2 = alloca i32, 1
  let %3 = alloca i32, 1
  let %4 = alloca i32, 1
  let %5 = store 1, %4
  let %6 = store 0, %0
  jmp label %8
%8:
  let %9 = load %0
  let %10 = lt %9, 9
  br %10, label %12, label %18
%12:
  let %13 = load %4
  br %13, label %15, label %18
%15:
  let %16 = store 0, %1
  jmp label %20
%18:
  jmp label %53
%20:
  let %21 = load %1
  let %22 = lt %21, 9
  br %22, label %24, label %29
%24:
  let %25 = load %4
  br %25, label %27, label %29
%27:
  jmp label %34
%29:
  let %30 = load %0
  let %31 = add %30, 1
  let %32 = store %31, %0
  jmp label %8
%34:
  let %35 = load %0
  let %36 = load %1
  let %37 = offset i32, @a, [%35 < 9], [%36 < 9]
  let %38 = load %37
  let %39 = eq %38, 0
  br %39, label %41, label %48
%41:
  let %42 = store 0, %4
  let %43 = load %0
  let %44 = store %43, %2
  let %45 = load %1
  let %46 = store %45, %3
  jmp label %48
%48:
  let %49 = load %1
  let %50 = add %49, 1
  let %51 = store %50, %1
  jmp label %20
%53:
  let %54 = load %4
  br %54, label %56, label %60
%56:
  let %57 = call @check_sudoku, @a
  let %58 = store %57, %ret.addr
  jmp label %exit
%60:
  let %61 = store 1, %0
  jmp label %63
%63:
  let %64 = load %0
  let %65 = le %64, 9
  br %65, label %67, label %74
%67:
  let %68 = load %2
  let %69 = load %3
  let %70 = offset i32, @a, [%68 < 9], [%69 < 9]
  let %71 = load %0
  let %72 = store %71, %70
  jmp label %81
%74:
  let %75 = load %2
  let %76 = load %3
  let %77 = offset i32, @a, [%75 < 9], [%76 < 9]
  let %78 = store 0, %77
  let %79 = store 0, %ret.addr
  jmp label %exit
%81:
  let %82 = call @check_sudoku, @a
  br %82, label %84, label %86
%84:
  jmp label %91
%86:
  let %87 = load %0
  let %88 = add %87, 1
  let %89 = store %88, %0
  jmp label %63
%91:
  let %92 = call @solve_sudoku
  br %92, label %94, label %97
%94:
  let %95 = store 1, %ret.addr
  jmp label %exit
%97:
  jmp label %86
%exit:
  let %99 = load %ret.addr
  ret %99
}
fn @main( ) -> i32 {
%entry:
  let %ret.addr = alloca i32, 1
  let %0 = alloca i32, 1
  let %1 = store 0, %0
  let %2 = alloca i32, 1
  let %3 = store 0, %2
  let %4 = alloca i32, 1
  let %5 = store 0, %4
  jmp label %7
%7:
  let %8 = load %0
  let %9 = lt %8, 9
  br %9, label %11, label %14
%11:
  let %12 = store 0, %2
  jmp label %16
%14:
  jmp label %70
%16:
  let %17 = load %2
  let %18 = lt %17, 9
  br %18, label %20, label %27
%20:
  let %21 = load %0
  let %22 = load %2
  let %23 = offset i32, @a, [%21 < 9], [%22 < 9]
  let %24 = call @getint
  let %25 = store %24, %23
  jmp label %32
%27:
  let %28 = load %0
  let %29 = add %28, 1
  let %30 = store %29, %0
  jmp label %7
%32:
  let %33 = load %0
  let %34 = load %2
  let %35 = offset i32, @a, [%33 < 9], [%34 < 9]
  let %36 = load %35
  let %37 = lt %36, 0
  br %37, label %46, label %39
%39:
  let %40 = load %0
  let %41 = load %2
  let %42 = offset i32, @a, [%40 < 9], [%41 < 9]
  let %43 = load %42
  let %44 = gt %43, 9
  br %44, label %46, label %51
%46:
  let %47 = call @putint, 0
  let %48 = call @putch, 32
  let %49 = store 0, %ret.addr
  jmp label %exit
%51:
  jmp label %58
%53:
  let %54 = load %2
  let %55 = add %54, 1
  let %56 = store %55, %2
  jmp label %16
%58:
  let %59 = load %0
  let %60 = load %2
  let %61 = offset i32, @a, [%59 < 9], [%60 < 9]
  let %62 = load %61
  let %63 = eq %62, 0
  br %63, label %65, label %68
%65:
  let %66 = store 1, %4
  jmp label %68
%68:
  jmp label %53
%70:
  let %71 = load %4
  br %71, label %73, label %75
%73:
  jmp label %80
%75:
  jmp label %121
%77:
  let %78 = store 0, %ret.addr
  jmp label %exit
%80:
  let %81 = call @solve_sudoku
  br %81, label %83, label %86
%83:
  let %84 = store 0, %0
  jmp label %92
%86:
  let %87 = call @putint, 0
  let %88 = call @putch, 32
  jmp label %90
%90:
  jmp label %77
%92:
  let %93 = load %0
  let %94 = lt %93, 9
  br %94, label %96, label %99
%96:
  let %97 = store 0, %2
  jmp label %101
%99:
  jmp label %90
%101:
  let %102 = load %2
  let %103 = lt %102, 9
  br %103, label %105, label %116
%105:
  let %106 = load %0
  let %107 = load %2
  let %108 = offset i32, @a, [%106 < 9], [%107 < 9]
  let %109 = load %108
  let %110 = call @putint, %109
  let %111 = call @putch, 32
  let %112 = load %2
  let %113 = add %112, 1
  let %114 = store %113, %2
  jmp label %101
%116:
  let %117 = load %0
  let %118 = add %117, 1
  let %119 = store %118, %0
  jmp label %92
%121:
  let %122 = call @check_sudoku, @a
  br %122, label %124, label %128
%124:
  let %125 = call @putint, 1
  let %126 = call @putch, 32
  jmp label %132
%128:
  let %129 = call @putint, 0
  let %130 = call @putch, 32
  jmp label %132
%132:
  jmp label %77
%exit:
  let %134 = load %ret.addr
  ret %134
}
