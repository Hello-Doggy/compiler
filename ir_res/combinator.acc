fn @getarray(#0: i32* ) -> i32;
fn @getch( ) -> i32;
fn @getint( ) -> i32;
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putint(#0: i32 ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @factorial(#m: i32 ) -> i32 {
%entry:
  let %0 = alloca i32, 1
  let %1 = store #m, %0
  let %ret.addr = alloca i32, 1
  let %2 = alloca i32, 1
  let %3 = store 1, %2
  jmp label %5
%5:
  let %6 = load %0
  let %7 = gt %6, 1
  br %7, label %9, label %18
%9:
  let %10 = load %2
  let %11 = load %0
  let %12 = mul %10, %11
  let %13 = store %12, %2
  let %14 = load %0
  let %15 = sub %14, 1
  let %16 = store %15, %0
  jmp label %5
%18:
  let %19 = load %2
  let %20 = store %19, %ret.addr
  jmp label %exit
%exit:
  let %22 = load %ret.addr
  ret %22
}
fn @cal_combiniation(#c_base: i32, #c_num: i32 ) -> i32 {
%entry:
  let %0 = alloca i32, 1
  let %1 = store #c_base, %0
  let %2 = alloca i32, 1
  let %3 = store #c_num, %2
  let %ret.addr = alloca i32, 1
  let %4 = load %0
  let %5 = call @factorial, %4
  let %6 = load %2
  let %7 = call @factorial, %6
  let %8 = load %0
  let %9 = load %2
  let %10 = sub %8, %9
  let %11 = call @factorial, %10
  let %12 = mul %7, %11
  let %13 = div %5, %12
  let %14 = store %13, %ret.addr
  jmp label %exit
%exit:
  let %16 = load %ret.addr
  ret %16
}
fn @cal_permutation(#p_base: i32, #p_num: i32 ) -> i32 {
%entry:
  let %0 = alloca i32, 1
  let %1 = store #p_base, %0
  let %2 = alloca i32, 1
  let %3 = store #p_num, %2
  let %ret.addr = alloca i32, 1
  let %4 = load %0
  let %5 = call @factorial, %4
  let %6 = load %0
  let %7 = load %2
  let %8 = sub %6, %7
  let %9 = call @factorial, %8
  let %10 = div %5, %9
  let %11 = store %10, %ret.addr
  jmp label %exit
%exit:
  let %13 = load %ret.addr
  ret %13
}
fn @main( ) -> i32 {
%entry:
  let %ret.addr = alloca i32, 1
  let %0 = alloca i32, 1
  let %1 = call @getint
  let %2 = store %1, %0
  let %3 = alloca i32, 1
  let %4 = call @getint
  let %5 = store %4, %3
  let %6 = load %0
  let %7 = load %3
  let %8 = call @cal_combiniation, %6, %7
  let %9 = call @putint, %8
  let %10 = call @putch, 32
  let %11 = load %0
  let %12 = load %3
  let %13 = call @cal_permutation, %11, %12
  let %14 = call @putint, %13
  let %15 = store 0, %ret.addr
  jmp label %exit
%exit:
  let %17 = load %ret.addr
  ret %17
}
