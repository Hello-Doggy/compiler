fn @getarray(#0: i32* ) -> i32;
fn @getch( ) -> i32;
fn @getint( ) -> i32;
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putint(#0: i32 ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @print_array(#a: i32*, #len: i32 ) -> () {
%entry:
  let %0 = alloca i32, 1
  let %1 = store #a, %0
  let %2 = alloca i32, 1
  let %3 = store #len, %2
  let %4 = alloca i32, 1
  let %5 = store 0, %4
  jmp label %7
%7:
  let %8 = load %4
  let %9 = load %2
  let %10 = lt %8, %9
  br %10, label %12, label %22
%12:
  let %13 = load %4
  let %14 = offset i32, %0, [%13 < none]
  let %15 = load %14
  let %16 = call @putint, %15
  let %17 = call @putch, 32
  let %18 = load %4
  let %19 = add %18, 1
  let %20 = store %19, %4
  jmp label %7
%22:
  jmp label %exit
%exit:
  ret ()
}
fn @main( ) -> i32 {
%entry:
  let %ret.addr = alloca i32, 1
  let %0 = alloca i32, 8
  let %1 = offset i32, %0, [0 < 4], [0 < 2]
  let %2 = store 1, %1
  let %3 = offset i32, %0, [0 < 4], [1 < 2]
  let %4 = store 2, %3
  let %5 = offset i32, %0, [1 < 4], [0 < 2]
  let %6 = store 3, %5
  let %7 = offset i32, %0, [1 < 4], [1 < 2]
  let %8 = store 4, %7
  let %9 = offset i32, %0, [2 < 4], [0 < 2]
  let %10 = store 5, %9
  let %11 = offset i32, %0, [2 < 4], [1 < 2]
  let %12 = store 6, %11
  let %13 = offset i32, %0, [3 < 4], [0 < 2]
  let %14 = store 7, %13
  let %15 = offset i32, %0, [3 < 4], [1 < 2]
  let %16 = store 8, %15
  let %17 = offset i32, %0, [2 < 4], [0 < 2]
  let %18 = call @print_array, %17, 2
  let %19 = offset i32, %0, [1 < 4], [0 < 2]
  let %20 = call @print_array, %19, 2
  let %21 = offset i32, %0, [0 < 4], [0 < 2]
  let %22 = call @print_array, %21, 2
  let %23 = offset i32, %0, [3 < 4], [0 < 2]
  let %24 = call @print_array, %23, 2
  let %25 = store 0, %ret.addr
  jmp label %exit
%exit:
  let %27 = load %ret.addr
  ret %27
}
