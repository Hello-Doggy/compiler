fn @getarray(#0: i32* ) -> i32;
fn @getch( ) -> i32;
fn @getint( ) -> i32;
fn @putarray(#0: i32, #1: i32* ) -> ();
fn @putch(#0: i32 ) -> ();
fn @putint(#0: i32 ) -> ();
fn @starttime( ) -> ();
fn @stoptime( ) -> ();
fn @main( ) -> i32 {
%entry:
  let %ret.addr = alloca i32, 1
  let %0 = alloca i32, 1
  let %1 = alloca i32, 1
  let %2 = alloca i32, 1
  let %3 = alloca i32, 1
  let %4 = alloca i32, 1
  let %5 = store 5, %0
  let %6 = store 5, %1
  let %7 = store 1, %2
  let %8 = sub 0, 2
  let %9 = store %8, %3
  let %10 = store 2, %4
  jmp label %12
%12:
  let %13 = load %3
  let %14 = mul %13, 1
  let %15 = div %14, 2
  let %16 = lt %15, 0
  br %16, label %30, label %18
%18:
  let %19 = load %0
  let %20 = load %1
  let %21 = sub %19, %20
  let %22 = ne %21, 0
  br %22, label %24, label %34
%24:
  let %25 = load %2
  let %26 = add %25, 3
  let %27 = rem %26, 2
  let %28 = ne %27, 0
  br %28, label %30, label %34
%30:
  let %31 = load %4
  let %32 = call @putint, %31
  jmp label %34
%34:
  jmp label %36
%36:
  let %37 = load %3
  let %38 = rem %37, 2
  let %39 = add %38, 67
  let %40 = lt %39, 0
  br %40, label %54, label %42
%42:
  let %43 = load %0
  let %44 = load %1
  let %45 = sub %43, %44
  let %46 = ne %45, 0
  br %46, label %48, label %59
%48:
  let %49 = load %2
  let %50 = add %49, 2
  let %51 = rem %50, 2
  let %52 = ne %51, 0
  br %52, label %54, label %59
%54:
  let %55 = store 4, %4
  let %56 = load %4
  let %57 = call @putint, %56
  jmp label %59
%59:
  let %60 = store 0, %ret.addr
  jmp label %exit
%exit:
  let %62 = load %ret.addr
  ret %62
}
